#!/usr/bin/env node
// -*- js2 -*-
const path = require('path');
const fs = require('fs');
let program = require('commander');

const koruPackage = JSON.parse(fs.readFileSync(path.resolve(__dirname, '../package.json')));

const match = process.argv[2] && /^(db-)/.exec(process.argv[2]);

switch (match ? match[1] : process.argv[2]) {

case 'generate': case 'g':
  load('generate')(program);
  break;

case 'db-':
  load('db-commands')(program);
  break;

default:
  program
    .command('new [name]')
    .option('--link', 'link to global koru instead of local install')
    .option('-p, --pretend', 'Run but do not make any changes')
    .option('--force', 'overwrite existing files')
    .description('create a new (or update an existing) application called name')
    .action(load('new'));

  program
    .command('generate', null)
    .alias('g')
    .usage('GENERATOR [args] [options]')
    .description(`create things in you project`);

  program
    .command('test')
    .usage('[-s] [-c] [testModule] [testNamePrefix]')
    .option('-s, --server', 'Only run server tests')
    .option('-c, --client', 'Only run client tests')
    .description('run tests.')
    .action(load('test'));

  program
    .command('db-migrate')
    .description('Apply migration scripts to the database');


  program.parse(process.argv);

  if (program) {
    if (program.rawArgs.length > 2) {
      console.error("Unexpected command: ", program.rawArgs[2]);
      process.exit(1);
    }
    program.help();
  }

  function load(command) {
    return function () {
      this.koruVersion = koruPackage.version;
      program = null;
      require('../lib/'+command).apply(this, arguments);
    };
  }
}
