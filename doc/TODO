* Subscriptions

   Like methods there should be something like the "simulation"
   methods. These things are used to test if a doc should be on the
   client. Basically a map of ModelName => test. The test says yes or
   no to a doc. So like publish but say
     "vote(model, function(doc {...})"
   Only one vote needs to pass. It could be both server and client. On
   server it could be used filter fields as well. It could be part of
   publish like say: "sub.vote". It would be cancelled when sub
   stopped. The publish method could be called on both server and
   client but conditional bits for server only like model observers.

   Unlike methods the client side publish would be compulsory.

         publish("Org", function(sub) {

           sub.vote(Org, function(doc) {
             return doc.admin_ids.indexOf(sub.userId) !== -1;
           });

           if (isClient) return;

           // server stuff
           ...
           sub.ready();
         });

   This would help solve the "setUserId and "reconnect" issues below.

* setUserId needs to fixup any open subscriptions
 Tricky when sub sets the userId

* Need to fix reconnect sending messages and subscriptions

* Server update multiple records
   could do one fetch then one update then proceed similar to client.


* SRP is CPU intensive and blocks node;
   consider handing off to worker thread on server

* Use https://github.com/ahyatt/emacs-websocket
   to talk to server instead of geddon-test.js
