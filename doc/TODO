Issues and Ideas
================

* Lock doc by id before update
   Do in query-server.js. lock waits if already locked.

* Client: On setUserId
   (is this already done?)
   resubscribe and match all changed matchers. Maybe limit matchers to
   one model per subscription

* Change when no existing record
   (do we need this?)
   should request it via method fetchIdFromServer. The server will
   check if a matcher accepts the client.

* Server side publish should batch sends to client
   When mutilple subscriptions are interested in the same doc we
   should only send once to client. We can have a feature in the
   notify that allows the pub to register a callback if it wants to
   send data to client. The callback is run once all observers are
   notified.

   We want to register it via the sessId so that only one callback is
   registered per session.

   More thoughts:

   notify should pass an extra arg: an Inform func which if called is passed a
   callback to call after everyone notified.

   This is used by the publish logic to actually send data to the
   client. if two observers match the same doc then only one message
   needs to be sent to client. Also fields can be filtered here.

   The publish should only call the Inform func if not already called.

* Server update multiple records
   could do one fetch then one update then proceed similar to client.


* SRP is CPU intensive and blocks node;
   is this true for server logic?
   consider handing off to worker thread on server

* Use https://github.com/ahyatt/emacs-websocket
   to talk to server instead of geddon-test.js




-------
