Issues and Ideas
================

* Fix providerMap for html! and b!
   In fact replace b! with koru/validator!

* Client: On setUserId
   (is this already done?)
   resubscribe and match all changed matchers. Maybe limit matchers to
   one model per subscription

* Change when no existing record
   (do we need this?)
   should request it via method fetchIdFromServer. The server will
   check if a matcher accepts the client.

* Server side publish should batch sends to client
   When mutilple subscriptions are interested in the same doc we
   should only send once to client. We can have a feature in the
   notify that allows the pub to register a callback if it wants to
   send data to client. The callback is run once all observers are
   notified.

   We want to register it via the sessId so that only one callback is
   registered per session.

   More thoughts:

   notify should pass an extra arg: an Inform func which if called is passed a
   callback to call after everyone notified.

   This is used by the publish logic to actually send data to the
   client. if two observers match the same doc then only one message
   needs to be sent to client. Also fields can be filtered here.

   The publish should only call the Inform func if not already called.

* Need to fix reconnect sending messages and subscriptions

* Server update multiple records
   could do one fetch then one update then proceed similar to client.


* SRP is CPU intensive and blocks node;
   consider handing off to worker thread on server

* Use https://github.com/ahyatt/emacs-websocket
   to talk to server instead of geddon-test.js




-------


done * Subscriptions

   Like methods there should be something like the "simulation"
   methods. These things are used to test if a doc should be on the
   client. Basically a map of ModelName => test. The test says yes or
   no to a doc. So like publish but say
     "vote(model, function(doc {...})"
   Only one vote needs to pass. It could be both server and client. On
   server it could be used filter fields as well. It could be part of
   publish like say: "sub.vote". It would be cancelled when sub
   stopped. The publish method could be called on both server and
   client but conditional bits for server only like model observers.

   Unlike methods the client side publish would be compulsory.

         publish("Org", function(sub) {

           sub.vote(Org, function(doc) {
             return doc.admin_ids.indexOf(sub.userId) !== -1;
           });

           if (isClient) return;

           // server stuff
           ...
           sub.ready();
         });

   This would help solve the "setUserId and "reconnect" issues below.
