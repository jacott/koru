{
  "koru/test/api": {
    "subject": {
      "ids": [
        "koru/test/api"
      ],
      "name": "API",
      "abstracts": [
        "API is a semi-automatic API document generator. It uses\nunit-tests to determine types and values at test time."
      ]
    },
    "newInstance": null,
    "properties": null,
    "methods": {
      "module": {
        "test": "koru/test/api test module",
        "sig": "module(subject, subjectName, subjectModules)",
        "intro": "Specify the <subject> to be documented\n\n@param {[module,...]} subjectModules - list of modules that define the subject",
        "calls": [
          [
            [],
            [
              "Oi",
              "{API(API)}",
              "koru/test/api"
            ]
          ],
          [
            [
              [
                "O",
                "{clean: => clean}"
              ],
              "myHelper"
            ],
            [
              "Oi",
              "{API(myHelper)}",
              "koru/test/api"
            ]
          ],
          [
            [
              [
                "F",
                "Elf"
              ]
            ],
            [
              "Oi",
              "{API(Elf)}",
              "koru/test/api"
            ]
          ]
        ]
      },
      "example": {
        "test": "koru/test/api test example",
        "sig": "example(body)",
        "intro": "Run a section of as an example of a method call.",
        "calls": [
          [
            [
              [
                "F",
                "body"
              ]
            ]
          ],
          {
            "body": "        class Color {\n          static define(name, value) {\n            this.colors[name] = value;\n          }\n          // ...\n        }\n        Color.colors = {};\n\n        API.module(Color);\n        API.method('define');\n\n        API.example(() => {\n          // this body of code is executed\n          Color.define('red', '#f00');\n          Color.define('blue', '#00f');\n          assert.same(Color.colors.red, '#f00');\n        });\n      ",
            "calls": [
              [
                [
                  [
                    "F",
                    "() => {...}"
                  ]
                ]
              ]
            ]
          }
        ]
      },
      "comment": {
        "test": "koru/test/api test comment",
        "sig": "comment(comment)",
        "intro": "Add a comment before the next example",
        "calls": [
          {
            "body": "        class Excercise {\n          static register(name, minutes) {}\n          begin() {}\n        }\n\n        API.module(Excercise);\n        API.method('register');\n\n        API.comment('Optionally set the default duration');\n        Excercise.register('Jogging', 5); // This call gets the comment\n        Excercise.register('Skipping'); // This call get no comment\n      ",
            "calls": [
              [
                [
                  "Optionally set the default duration"
                ]
              ]
            ]
          }
        ]
      },
      "property": {
        "test": "koru/test/api test property",
        "sig": "property(name, options)",
        "intro": "Document a property of the current subject",
        "calls": [
          {
            "body": "        v.defaults = {\n          logger: function () {},\n          width: 800,\n          height: 600,\n          theme: {\n            name: 'light',\n            primaryColor: '#aaf'\n          }\n        };\n\n        API.module(v.defaults, 'defaults');\n        API.property('theme', {\n          info: 'The default theme',\n          properties: {\n            name: value => {\n              v.name = value;\n              return 'The theme name is ${value}';\n            },\n            primaryColor: 'The primary color is ${value}'\n          },\n        });\n        assert.same(v.name, 'light');\n\n        API.property('logger', value => {\n          v.logger = value;\n          return 'The default logger is ${value}';\n        });\n\n        assert.same(v.logger, v.defaults.logger);\n      ",
            "calls": [
              [
                [
                  "theme",
                  [
                    "O",
                    "{info: 'The default theme', properties: {name: => name, primaryColor: 'The primary color is ${value}'}}"
                  ]
                ]
              ],
              [
                [
                  "logger",
                  [
                    "F",
                    "value => {...}"
                  ]
                ]
              ]
            ]
          },
          [
            [
              "width"
            ],
            null,
            "If no info supplied then the test description is used"
          ]
        ]
      },
      "new": {
        "test": "koru/test/api test new",
        "sig": "new()",
        "intro": "Document <constructor> for the current subject\n\n@returns a ProxyClass which is to be used instead of `new Class`",
        "calls": [
          [
            [],
            [
              "F",
              "newProxy"
            ]
          ]
        ]
      },
      "method": {
        "test": "koru/test/api test method",
        "sig": "method(methodName)",
        "intro": "Document <methodName> for the current subject",
        "calls": [
          [
            [
              "fnord"
            ]
          ]
        ]
      },
      "protoMethod": {
        "test": "koru/test/api test protoMethod",
        "sig": "protoMethod(methodName)",
        "intro": "Document prototype <methodName> for the current subject",
        "calls": [
          {
            "body": "        class Tree {\n          constructor(name) {\n            this.name = name;\n            this.branches = 10;\n          }\n\n          prune(branchCount) {\n            return this.branches -= branchCount;\n          }\n        };\n\n        API.module(Tree);\n        API.protoMethod('prune');\n\n        const plum = new Tree('Plum');\n        assert.same(plum.prune(3), 7);\n        assert.same(plum.prune(2), 5);\n      ",
            "calls": [
              [
                [
                  "prune"
                ]
              ]
            ]
          }
        ]
      }
    },
    "protoMethods": {}
  },
  "koru/util": {
    "subject": {
      "ids": [
        "koru/util-base",
        "koru/util",
        "koru/util-server"
      ],
      "name": "util",
      "abstracts": [
        null,
        "The util module provides commonly performed utility functions.",
        null
      ]
    },
    "newInstance": null,
    "properties": null,
    "methods": {
      "toDp": {
        "test": "koru/util test toDp",
        "sig": "toDp(number, dp, zeroFill)",
        "intro": "Return a floating point <number> as a string to\n<dp> decimal places.\n\n@param {boolean} zeroFill - pad with zeros.",
        "calls": [
          [
            [
              10.7,
              0
            ],
            "11"
          ],
          [
            [
              2.6,
              1
            ],
            "2.6"
          ],
          [
            [
              1.2345,
              3,
              true
            ],
            "1.235"
          ],
          [
            [
              1.2,
              3,
              true
            ],
            "1.200"
          ],
          [
            [
              10,
              3
            ],
            "10"
          ]
        ]
      },
      "pc": {
        "test": "koru/util test pc",
        "sig": "pc(fraction)",
        "intro": "Convert a <fraction> into css % string",
        "calls": [
          [
            [
              "1.2345678"
            ],
            "123.45678%"
          ]
        ]
      },
      "px": {
        "test": "koru/util test px",
        "sig": "px(value)",
        "intro": "Convert a <fraction> into css % string",
        "calls": [
          [
            [
              "123.2345678"
            ],
            "123px"
          ]
        ]
      },
      "removeItem": {
        "test": "koru/util test removeItem",
        "sig": "removeItem(list, item)",
        "intro": "remove an <item> from a <list>. <list> is modified.\n\nReturns <item> if found\n\n@param item - can be a key-value object to compare the given keys.",
        "calls": [
          [
            [
              [
                "Oi",
                "[1, 2, 3]",
                "Array"
              ],
              2
            ],
            2
          ],
          [
            [
              [
                "Oi",
                "[1, 3]",
                "Array"
              ],
              4
            ]
          ],
          [
            [
              [
                "Oi",
                "[1, 3]",
                "Array"
              ],
              1
            ],
            1
          ],
          [
            [
              [
                "Oi",
                "[3]",
                "Array"
              ],
              3
            ],
            3
          ],
          [
            [
              [
                "Oi",
                "[]",
                "Array"
              ]
            ]
          ],
          [
            [
              [
                "Oi",
                "[{id: 4, name: 'foo'}, {id: 5, name: 'bar'}, {x: 1}]",
                "Array"
              ],
              [
                "O",
                "{name: 'bar', x: 1}"
              ]
            ]
          ],
          [
            [
              [
                "Oi",
                "[{id: 4, name: 'foo'}, {id: 5, name: 'bar'}, {x: 1}]",
                "Array"
              ],
              [
                "O",
                "{name: 'bar'}"
              ]
            ],
            [
              "O",
              "{id: 5, name: 'bar'}"
            ]
          ],
          [
            [
              [
                "Oi",
                "[{id: 4, name: 'foo'}, {x: 1}]",
                "Array"
              ],
              [
                "O",
                "{id: 4, name: 'foo'}"
              ]
            ],
            [
              "O",
              "{id: 4, name: 'foo'}"
            ]
          ]
        ]
      },
      "intersectp": {
        "test": "koru/util test intersectp",
        "sig": "intersectp(list1, list2)",
        "intro": "Determine if <list1> and <list2> intersect",
        "calls": [
          [
            [
              [
                "Oi",
                "[1, 4]",
                "Array"
              ],
              [
                "Oi",
                "[4, 5]",
                "Array"
              ]
            ],
            true
          ],
          [
            [
              [
                "Oi",
                "[1, 2]",
                "Array"
              ],
              [
                "Oi",
                "['a']",
                "Array"
              ]
            ],
            false
          ]
        ]
      },
      "reverseForEach": {
        "test": "koru/util test reverseForEach",
        "sig": "reverseForEach(list, visitor)",
        "intro": "Visit <list> in reverse order.\n\n@param visitor - called with the list <item> and <index>",
        "calls": [
          {
            "body": "        var results = [];\n        util.reverseForEach(v.list = [1,2,3], (val, index) => {\n          results.push(val+\".\"+index);\n        });\n        assert.equals(results, ['3.2', '2.1', '1.0']);\n\n        // ignores null list\n        util.reverseForEach(null, v.stub = test.stub());\n        refute.called(v.stub);\n      ",
            "calls": [
              [
                [
                  [
                    "Oi",
                    "[1, 2, 3]",
                    "Array"
                  ],
                  [
                    "F",
                    "(val, index) => {...}"
                  ]
                ]
              ],
              [
                [
                  [
                    "O",
                    "null"
                  ],
                  [
                    "F",
                    "stub"
                  ]
                ]
              ]
            ]
          }
        ]
      }
    },
    "protoMethods": {}
  },
  "koru/ui/route": {
    "subject": {
      "ids": [
        "koru/ui/route"
      ],
      "name": "Route",
      "abstracts": [
        "Route is a paginging system within a one page app. It manages\ncreating and destroying pages and recording history."
      ]
    },
    "newInstance": null,
    "properties": null,
    "methods": {
      "setTitle": {
        "test": "koru/ui/route with routeVar test setTitle",
        "sig": "setTitle(title)",
        "intro": "Set the <document.title> for the current page.",
        "calls": [
          [
            [
              "my title"
            ]
          ]
        ]
      }
    },
    "protoMethods": {}
  },
  "koru/css/loader": {
    "subject": {
      "ids": [],
      "name": "CssLoader",
      "abstracts": []
    },
    "newInstance": null,
    "properties": null,
    "methods": {
      "loadAll": {
        "test": "koru/css/loader test load all",
        "sig": "loadAll(dir)",
        "intro": "Load all css and less files under <dir>",
        "calls": [
          [
            [
              "koru/css"
            ]
          ]
        ]
      }
    },
    "protoMethods": {}
  },
  "koru/idle-check": {
    "subject": {
      "ids": [
        "koru/idle-check"
      ],
      "name": "IdleCheck",
      "abstracts": [
        "IdleCheck keeps count of usage and notifies when idle.\n"
      ]
    },
    "newInstance": {
      "test": "koru/idle-check test constructor",
      "sig": "constructor()",
      "intro": null,
      "calls": [
        [
          [],
          [
            "Oi",
            "{_count: 0, _waitIdle: null}",
            "koru/idle-check"
          ]
        ]
      ]
    },
    "properties": {
      "singleton": {
        "value": [
          "Oi",
          "{_count: 0, _waitIdle: null}",
          "koru/idle-check"
        ],
        "info": "The default <IdleCheck>. It is used by {@module\nkoru/web-server-factory} and {@module\nsession/server-connection}"
      }
    },
    "methods": {},
    "protoMethods": {
      "waitIdle": {
        "test": "koru/idle-check waitIdle test already Idle",
        "sig": "waitIdle(func)",
        "intro": "waitIdle waits until <this.count> drops to zero.",
        "calls": [
          {
            "body": "          const check = new IdleCheck();\n          check.waitIdle(v.stub = test.stub());\n          assert.called(v.stub);\n        ",
            "calls": [
              [
                [
                  [
                    "F",
                    "stub"
                  ]
                ]
              ]
            ]
          }
        ]
      }
    }
  }
}